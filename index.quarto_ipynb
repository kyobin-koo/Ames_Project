{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"5조 Ames Project\"\n",
        "format:\n",
        "    dashboard:\n",
        "        logo: logo.png\n",
        "        # css: styles.css\n",
        "        page-layout: dashboard\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "# 목적\n",
        "\n",
        "## Row\n",
        "\n",
        "### {.tabset}\n",
        "\n",
        "\n",
        "#### 💡 미국 집 매매 예산안\n",
        "\n",
        "- 미국 Ames에 집 매매 예산안 구성\n",
        "    - 주택 가격 <br>\n",
        "    - 클로징 비용 : 바이어와 셀러가 지불하는 비용 <br>\n",
        "    - 유지 및 관리 비용 : 구매한 후에 들어가는 유지 및 관리 비용 <br>\n",
        "\n",
        "\n",
        "#### 💡 미국의 집값은\n",
        "\n",
        "![](./homerepair.PNG){width=500px}\n",
        "<br>\n",
        "<br>\n",
        "- **미국 연간 유지비용**에 대한 권장사항은 주택 원래 가격의 1.5% ~ 4%까지 다양함.<br>\n",
        "ex) 70만 달러에 주택을 구매한다면 연간 10,500~28,000 달러를 유지비로 지출<br>\n",
        "\n",
        "\n",
        "#### 💡 목적\n",
        "\n",
        "📍 유지 및 관리 비용 ⬇  매매 가격 ⬇ 집을 찾아보자!\n",
        "<br>\n",
        "<br>\n",
        "👀 \" 저렴한 집값만 보고 샀다가 유지비 폭탄?\"\n",
        "<br>\n",
        "<br>\n",
        "프로젝트 목적 : 지금 당장 드러나는 가격뿐 아니라, 장기적인 유지 비용까지 고려한 ‘진짜 합리적인 집 구매’를 꿈꾸는 사람들을 위한 Ames 부동산 분석 프로젝트\n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "## Row \n"
      ],
      "id": "4f930663"
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "품질 / 상태",
        "icon": "wrench",
        "color": "primary"
      },
      "source": [
        "dict(\n",
        "    value = (14)\n",
        ")"
      ],
      "id": "d1f291b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "면적",
        "color": "primary"
      },
      "source": [
        "dict(\n",
        "icon = \"aspect-ratio\",\n",
        "\n",
        "value = (5))"
      ],
      "id": "7596356a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "욕실",
        "color": "primary"
      },
      "source": [
        "dict(\n",
        "icon = \"droplet\",\n",
        "\n",
        "value = 4)"
      ],
      "id": "5456412c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "content": "valuebox",
        "title": "연도",
        "color": "primary"
      },
      "source": [
        "dict(\n",
        "icon = \"calendar\",\n",
        "\n",
        "value = 3)"
      ],
      "id": "27ad6dd5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row\n",
        "\n",
        "\n",
        "### 품질 / 상태\n",
        "- `OverallQual`  \n",
        "- `OverallCond`  \n",
        "- `RoofStyle`  \n",
        "- `ExterQual`  \n",
        "- `ExterCond`  \n",
        "- `Exterior1st`  \n",
        "- `HeatingQC`  \n",
        "- `GarageCond`  \n",
        "- `BsmtCond`  \n",
        "- `BsmtQual`  \n",
        "- `KitchenQual`  \n",
        "- `GarageQual`  \n",
        "- `Foundation`  \n",
        "- `PavedDrive`\n",
        "\n",
        "\n",
        "### 면적 관련\n",
        "- `GrLivArea`  \n",
        "- `TotalBsmtSF`  \n",
        "- `GarageArea`  \n",
        "- `WoodDeckSF`  \n",
        "- `TotRmsAbvGrd`\n",
        "\n",
        "### 욕실 관련\n",
        "- `FullBath`  \n",
        "- `HalfBath`  \n",
        "- `BsmtFullBath`  \n",
        "- `BsmtHalfBath`\n",
        "\n",
        "### 연도 관련\n",
        "- `YearBuilt`  \n",
        "- `YearRemodAdd`  \n",
        "- `GarageYrBlt`\n"
      ],
      "id": "156bfbd0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| include: false\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = pd.read_csv(\"./plotly_data/ames.csv\")\n",
        "\n",
        "# 사용자가 제시한 변수 목록 정리\n",
        "target_columns = [\n",
        "    # 품질/상태 관련\n",
        "    'OverallQual', 'OverallCond', 'RoofStyle', 'ExterQual', 'ExterCond',\n",
        "    'Exterior1st', 'HeatingQC', 'GarageCond', 'BsmtCond', 'BsmtQual',\n",
        "    'KitchenQual', 'GarageQual', 'Foundation', 'PavedDrive',\n",
        "    \n",
        "    # 연도 관련\n",
        "    'YearBuilt', 'YearRemodAdd', 'GarageYrBlt',\n",
        "    \n",
        "    # 욕실 관련\n",
        "    'FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath',\n",
        "    \n",
        "    # 면적 관련\n",
        "    'GrLivArea', 'TotalBsmtSF', 'GarageArea', 'WoodDeckSF',\n",
        "    \n",
        "    # 위치 관련\n",
        "    'TotRmsAbvGrd', 'Latitude', 'Longitude', 'SalePrice'\n",
        "]\n",
        "\n",
        "# 결측치 개수 확인\n",
        "missing_info = df[target_columns].isnull().sum()\n",
        "missing_info = missing_info[missing_info > 0]\n",
        "missing_info\n",
        "df = df.dropna(subset=['Latitude', 'Longitude'])\n",
        "\n",
        "\n",
        "\n",
        "# 4. 결측치 처리 \n",
        "# 4-1. 카테고리형 결측치: 지하실/차고가 없는 경우 \"None\" 처리\n",
        "df['GarageCond'] = df['GarageCond'].fillna(\"None\")\n",
        "df['BsmtCond'] = df['BsmtCond'].fillna(\"None\")\n",
        "df['BsmtQual'] = df['BsmtQual'].fillna(\"None\")\n",
        "df['GarageQual'] = df['BsmtQual'].fillna(\"None\")\n",
        "\n",
        "# 4-2. 수치형 결측치: 차고 건축연도 → 차고 없음이면 0으로\n",
        "df['GarageYrBlt'] = df['GarageYrBlt'].fillna(0)\n",
        "\n",
        "df['BsmtFullBath'] = df['BsmtFullBath'].fillna(0)\n",
        "df['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(0)\n",
        "df['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(0)\n",
        "df['GarageArea'] = df['GarageArea'].fillna(0)\n",
        "df = df.drop(columns=['PID'])\n",
        "\n",
        "\n",
        "df = df[target_columns]\n",
        "\n",
        "# 5. 범주형 변수 처리하기\n",
        "# 5️-1. 범주형 변수 → 수치형 변환 (Ordinal Encoding)\n",
        "# 범주형 변수 수치화 (Ordinal Encoding)\n",
        "ordinal_mappings = {\n",
        "    'ExterQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'ExterCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'HeatingQC': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'GarageCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'BsmtCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'BsmtQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'KitchenQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'GarageQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "}\n",
        "\n",
        "# 매핑 적용\n",
        "for col, mapping in ordinal_mappings.items():\n",
        "    df[col] = df[col].map(mapping)\n",
        "\n",
        "df = pd.get_dummies(df, columns=['RoofStyle', 'Exterior1st', 'Foundation', 'PavedDrive'], drop_first=True)\n",
        "\n",
        "\n",
        "# 6️. 결측치 확인\n",
        "print(df.isnull().sum())\n",
        "\n",
        "\n",
        "# LassoCV (변수 39개)\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 독립변수(X), 종속변수(y) 분리\n",
        "X = df.drop(columns=['SalePrice'])\n",
        "y = df['SalePrice']\n",
        "\n",
        "# 1. 스케일링 (표준화)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)  # X를 평균 0, 표준편차 1로 변환\n",
        "\n",
        "# 2️. LassoCV 학습 (교차검증으로 alpha 찾기)\n",
        "lasso = LassoCV(cv=5, random_state=2025)\n",
        "lasso.fit(X_scaled, y)\n",
        "\n",
        "# 3. 결과 확인\n",
        "best_alpha = lasso.alpha_\n",
        "coefficients = lasso.coef_\n",
        "\n",
        "# 4. 계수와 변수명을 데이터프레임으로 정리\n",
        "coef_df = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Coefficient': coefficients\n",
        "}).sort_values(by='Coefficient', key=abs, ascending=False)\n",
        "\n",
        "print(f\"Best alpha: {best_alpha}\")\n",
        "print(coef_df)\n",
        "\n",
        "\n",
        "X.columns"
      ],
      "id": "0c8f31c8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 변수 선택\n",
        "\n",
        "### {.tabset}\n",
        "\n",
        "#### EDA 데이터 \n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "517fbdc3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "#| include: true\n",
        "\n",
        "\n",
        "features = X.columns.tolist()\n",
        "\n",
        "# 평균 SalePrice by YearBuilt 그래프\n",
        "ax = df.groupby(\"YearBuilt\")[\"SalePrice\"].mean().plot(\n",
        "    kind=\"line\", figsize=(10, 4), marker=\"o\", color=\"royalblue\"\n",
        ")\n",
        "\n",
        "ax.set_title(\"Average Sale Price by Year Built\")\n",
        "ax.set_xlabel(\"Year Built\")\n",
        "ax.set_ylabel(\"Average Sale Price\")\n",
        "ax.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "6de6e68d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "a5cf5d34"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "#| include: true\n",
        "#### EDA   연식과 가격을 통한 지도 시각화 2\n",
        "\n",
        "import plotly.express as px\n",
        "\n",
        "fig = px.scatter_mapbox(\n",
        "    df,\n",
        "    lat=\"Latitude\",\n",
        "    lon=\"Longitude\",\n",
        "    color=\"YearBuilt\",           # 색상으로 연식 표현\n",
        "    size=\"SalePrice\",            # 크기로 가격 표현\n",
        "    color_continuous_scale=\"Blues\",\n",
        "    size_max=15,\n",
        "    zoom=11,\n",
        "    mapbox_style=\"carto-positron\",\n",
        "    hover_data=[\"SalePrice\", \"YearBuilt\", \"GrLivArea\", \"OverallQual\"]\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Housing Age & Price on Map\",\n",
        "    width=950,\n",
        "    height=600,\n",
        "    margin={\"r\":0,\"t\":40,\"l\":0,\"b\":0}\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "id": "9dfa67f2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "#### 데이터 전처리 및 결측치 처리\n",
        "\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "\n",
        "- 지하실 및 차고가 없는 경우는 `'None'`으로 채운 후, Ordinal Encoding을 통해 수치화함.\n",
        "- 차고 건축 연도(GarageYrBlt), 지하실 욕실 등 일부 수치형 결측치는 `0`으로 처리함.\n",
        "- 최종적으로 37개 주요 변수 추출함.\n",
        "\n",
        "- 감성적 특성과 관계된 30여 개 변수 선정  \n",
        "- 품질/상태, 면적, 위치, 연도, 욕실 수 등 포함  \n",
        "- 종속변수는 `SalePrice` 사용\n",
        "- `GarageCond`, `BsmtCond`, `BsmtQual`, `GarageQual` 등  \n",
        "  → 결측 = 해당 항목 없음 → `\"None\"`으로 처리\n",
        "- `GarageYrBlt`, `BsmtFullBath`, `BsmtHalfBath`, `TotalBsmtSF`, `GarageArea`  \n",
        "  → 결측 = 구조물 없음 → `0`으로 대체\n",
        "\n",
        "- 1. 범주형 변수 수치화\n",
        "- Ordinal Encoding\n",
        "- 품질/상태 관련: `\"None\"=0`, `\"Po\"=1` ~ `\"Ex\"=5`  \n",
        "- 대상 변수: `ExterQual`, `HeatingQC`, `KitchenQual`, 등\n",
        "- `RoofStyle`, `Exterior1st`, `Foundation`, `PavedDrive`  \n",
        "  → `pd.get_dummies`로 처리 (기준값 제외)\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "341cc238"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# 계수가 0이 아닌 변수만 선택\n",
        "selected_coef_df = coef_df[coef_df['Coefficient'] != 0].copy()\n",
        "\n",
        "# 절대값 기준 정렬\n",
        "selected_coef_df = selected_coef_df.sort_values(by='Coefficient', key=abs, ascending=True)\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(12, 10))\n",
        "plt.barh(selected_coef_df['Feature'], selected_coef_df['Coefficient'])\n",
        "plt.xlabel('Coefficient Value')\n",
        "plt.title('LassoCV - Selected Feature Coefficients')\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "9e1fb923",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### 변수 선정 방법\n",
        "-   1. **LassoCV 기반 변수 선택**\n",
        "    - 다중공선성을 고려하여 **LassoCV (5-Fold Cross Validation)** 를 적용.\n",
        "    - 최적의 alpha(209)를 기준으로 변수 축소.\n",
        "<br>\n",
        "<br>\n",
        "\n",
        "-   2. **상관계수 절대값 기반 변수 선택**\n",
        "    - 절대값을 기준으로 상위 10개인 상관계수 변수 선택.\n"
      ],
      "id": "ef19a723"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| include: false\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "import statsmodels.formula.api as smf\n",
        "import seaborn as sns\n",
        "from statsmodels.api import OLS\n",
        "from statsmodels.formula.api import ols\n",
        "import statsmodels.api as sm\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "df = pd.read_csv(\"./plotly_data/ames.csv\")\n",
        "# 사용자가 제시한 변수 목록 정리\n",
        "target_columns = [\n",
        "    # 품질/상태 관련\n",
        "    'OverallQual', 'OverallCond', 'RoofStyle', 'ExterQual', 'ExterCond',\n",
        "    'Exterior1st', 'HeatingQC', 'GarageCond', 'BsmtCond', 'BsmtQual',\n",
        "    'KitchenQual', 'GarageQual', 'Foundation', 'PavedDrive',\n",
        "    \n",
        "    # 연도 관련\n",
        "    'YearBuilt', 'YearRemodAdd', 'GarageYrBlt',\n",
        "    \n",
        "    # 욕실 관련\n",
        "    'FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath',\n",
        "    \n",
        "    # 면적 관련\n",
        "    'GrLivArea', 'TotalBsmtSF', 'GarageArea', 'WoodDeckSF',\n",
        "    \n",
        "    # 위치 관련\n",
        "    'TotRmsAbvGrd', 'Latitude', 'Longitude', 'SalePrice'\n",
        "]\n",
        "\n",
        "# 결측치 개수 확인\n",
        "missing_info = df[target_columns].isnull().sum()\n",
        "missing_info = missing_info[missing_info > 0]\n",
        "missing_info\n",
        "df = df.dropna(subset=['Latitude', 'Longitude'])\n",
        "\n",
        "\n",
        "\n",
        "# 4. 결측치 처리 \n",
        "# 4-1. 카테고리형 결측치: 지하실/차고가 없는 경우 \"None\" 처리\n",
        "df['GarageCond'] = df['GarageCond'].fillna(\"None\")\n",
        "df['BsmtCond'] = df['BsmtCond'].fillna(\"None\")\n",
        "df['BsmtQual'] = df['BsmtQual'].fillna(\"None\")\n",
        "df['GarageQual'] = df['BsmtQual'].fillna(\"None\")\n",
        "\n",
        "# 4-2. 수치형 결측치: 차고 건축연도 → 차고 없음이면 0으로\n",
        "df['GarageYrBlt'] = df['GarageYrBlt'].fillna(0)\n",
        "\n",
        "df['BsmtFullBath'] = df['BsmtFullBath'].fillna(0)\n",
        "df['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(0)\n",
        "df['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(0)\n",
        "df['GarageArea'] = df['GarageArea'].fillna(0)\n",
        "df = df.drop(columns=['PID'])\n",
        "\n",
        "\n",
        "df = df[target_columns]\n",
        "\n",
        "# 5. 범주형 변수 처리하기\n",
        "# 5️-1. 범주형 변수 → 수치형 변환 (Ordinal Encoding)\n",
        "# 범주형 변수 수치화 (Ordinal Encoding)\n",
        "ordinal_mappings = {\n",
        "    'ExterQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'ExterCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'HeatingQC': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'GarageCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'BsmtCond': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'BsmtQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'KitchenQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "    'GarageQual': {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5},\n",
        "}\n",
        "\n",
        "# 매핑 적용\n",
        "for col, mapping in ordinal_mappings.items():\n",
        "    df[col] = df[col].map(mapping)\n",
        "\n",
        "df = pd.get_dummies(df, columns=['RoofStyle', 'Exterior1st', 'Foundation', 'PavedDrive'], drop_first=True)\n",
        "\n",
        "\n",
        "# 6️. 결측치 확인\n",
        "print(df.isnull().sum())\n",
        "\n",
        "\n",
        "# LassoCV (변수 39개)\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 독립변수(X), 종속변수(y) 분리\n",
        "X = df.drop(columns=['SalePrice'])\n",
        "y = df['SalePrice']\n",
        "\n",
        "# 1. 스케일링 (표준화)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)  # X를 평균 0, 표준편차 1로 변환\n",
        "\n",
        "# 2️. LassoCV 학습 (교차검증으로 alpha 찾기)\n",
        "lasso = LassoCV(cv=5, random_state=2025)\n",
        "lasso.fit(X_scaled, y)\n",
        "\n",
        "# 3. 결과 확인\n",
        "best_alpha = lasso.alpha_\n",
        "coefficients = lasso.coef_\n",
        "\n",
        "# 4. 계수와 변수명을 데이터프레임으로 정리\n",
        "coef_df = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Coefficient': coefficients\n",
        "}).sort_values(by='Coefficient', key=abs, ascending=False)\n",
        "\n",
        "print(f\"Best alpha: {best_alpha}\")\n",
        "print(coef_df)\n",
        "\n",
        "\n",
        "\n",
        "# Lasso alpha\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 기준 alpha (LassoCV에서 나온 값)\n",
        "base_alpha = lasso.alpha_\n",
        "\n",
        "# 실험할 alpha 배수들\n",
        "alpha_multipliers = [0.5, 1, 2, 5, 10, 15, 20, 25]\n",
        "results = []\n",
        "\n",
        "# 반복해서 모델 돌리기\n",
        "for m in alpha_multipliers:\n",
        "    alpha = base_alpha * m\n",
        "    model = Lasso(alpha=alpha, max_iter=10000)\n",
        "    model.fit(X_scaled, y)\n",
        "    coef = model.coef_\n",
        "    num_nonzero = np.sum(coef != 0)\n",
        "    y_pred = model.predict(X_scaled)\n",
        "    mse = mean_squared_error(y, y_pred)\n",
        "\n",
        "    results.append({\n",
        "        'alpha': round(alpha, 5),\n",
        "        'multiplier': m,\n",
        "        'num_features': num_nonzero,\n",
        "        'mse': round(mse, 2)\n",
        "    })\n",
        "\n",
        "    # 남아 있는 변수 출력\n",
        "    print(f\"\\n[alpha = {alpha:.5f}]\")\n",
        "    print(f\"남은 변수 개수: {num_nonzero}\")\n",
        "    print(\"선택된 변수:\")\n",
        "    print(pd.Series(X.columns[coef != 0]).values)\n",
        "\n",
        "# 결과 DataFrame으로 정리\n",
        "results_df = pd.DataFrame(results)\n",
        "print(\"\\n📊 Alpha별 결과:\")\n",
        "print(results_df)"
      ],
      "id": "a8c9bb52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 그래프로 보기\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(results_df['alpha'], results_df['num_features'], marker='o', label='Selected Features')\n",
        "plt.xlabel('Alpha')\n",
        "plt.ylabel('Number of Selected Features')\n",
        "plt.title('Alpha 값에 따른 변수 선택 개수 변화')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "id": "c9cf0e48",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 최종 변수\n",
        "\n",
        "\n",
        "| 모델     | Adj. R-squared | AIC     |\n",
        "|----------|----------------|---------|\n",
        "| Model 1  | 0.852          | 58050   |\n",
        "| Model 2  | 0.853          | 58030   |\n",
        "\n",
        "- 최종 변수\n",
        "    'GrLivArea', 'TotalBsmtSF', 'GarageArea', \n",
        "    'OverallQual', 'KitchenQual', 'BsmtQual', 'ExterQual', \n",
        "    'OverallCond', 'BsmtFullBath',\n",
        "    'YearBuilt' \n"
      ],
      "id": "ecc0541a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| include: false\n",
        "\n",
        "from sklearn.linear_model import LassoCV\n",
        "lasso = LassoCV(cv=5).fit(X_scaled, y)\n",
        "top_features = coef_df[coef_df[\"Coefficient\"] != 0]['Feature'].head(10).tolist()"
      ],
      "id": "996ab65f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| include: false\n",
        "from sklearn.model_selection import GridSearchCV, KFold\n",
        "\n",
        "# alpha로 찾기\n",
        "selected_features = ['OverallQual', 'ExterQual', 'KitchenQual' ,'YearBuilt', 'BsmtFullBath',\n",
        "'GrLivArea', 'TotalBsmtSF' ,'GarageArea' ,'WoodDeckSF','RoofStyle_Hip' ]\n",
        "\n",
        "# 절대값으로 10개 찾기\n",
        "# 1. 종속변수 로그 변환\n",
        "y = (df['SalePrice'])  # log(1 + y)\n",
        "\n",
        "# 2. 상위 10개 피처 선택 (기존 coef_df 기준)\n",
        "top_features = coef_df[coef_df[\"Coefficient\"] != 0]['Feature'].head(10).tolist()\n",
        "X = df[top_features]\n",
        "\n",
        "# 3. 스케일링\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 4. Lasso + GridSearchCV 설정\n",
        "lasso = Lasso(max_iter=10000)\n",
        "alphas = np.linspace(0.01, 1, 100)\n",
        "cv = KFold(n_splits=5, shuffle=True, random_state=2025)\n",
        "grid = GridSearchCV(estimator=lasso, param_grid={'alpha': alphas},\n",
        "                    cv=cv, scoring='neg_mean_squared_error')\n",
        "grid.fit(X_scaled, y)"
      ],
      "id": "3979f0a4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 5. 최적 alpha 및 성능 확인\n",
        "print(\"Best alpha:\", grid.best_params_['alpha'])\n",
        "print(\"Best CV Score (MSE):\", -grid.best_score_)\n",
        "\n",
        "# 6. 회귀 계수 출력\n",
        "coef_df_top = pd.DataFrame({\n",
        "    'Feature': top_features,\n",
        "    'Coefficient': grid.best_estimator_.coef_}).sort_values(by='Coefficient', key=abs, ascending=False)\n",
        "\n",
        "print(coef_df_top)"
      ],
      "id": "8532995f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 유지보수 점수화 과정\n",
        "\n",
        "### \n",
        "📌 **점수화 과정**\n",
        "\n",
        "✔️ 10개 선정된 변수들 사이에서 이상치 체크<br>\n",
        "✔️ MinMaxScaler 적용하기<br>\n",
        "✔️ 면적, 품질, 상태, 연식 score로 만들기<br>\n",
        "✔️ score 별 가중치 곱하고 합산 진행<br>\n",
        "✔️ 가중치 컬럼(MaintenanceScore)을 만들기<br>\n",
        "\n",
        "\n",
        "\n",
        "### 유지보수 점수화 계산 단계 {.tabset}\n",
        "\n",
        "\n",
        "#### 📌 Step 1\n",
        "\n",
        "- 선정한 10개 변수들 사이 이상치를 확인<br>\n",
        "- **GrLivArea**, **GarageArea**, **TotalBsmtSF**에서 이상치 제거<br>\n"
      ],
      "id": "0af13eaf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "#| include: true\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 이상치 시각화\n",
        "fig = plt.figure(figsize=(16, 12))\n",
        "for i, col in enumerate(top_features):\n",
        "    ax = fig.add_subplot(4, 3, i + 1)\n",
        "    sns.scatterplot(data=df, x=col, y='SalePrice', s=20, ax=ax)\n",
        "    _ = ax.set_xlabel(col)\n",
        "    _ = ax.set_ylabel('')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# 이상치 조건\n",
        "condition = (\n",
        "    (df['GrLivArea'] <= 3500) &\n",
        "    (df['GarageArea'] <= 1200) &\n",
        "    (df['TotalBsmtSF'] <= 2500)\n",
        ")\n",
        "\n",
        "# 이상치 제거\n",
        "df_clean = df[condition].copy()"
      ],
      "id": "9760eebc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 📌 Step 2\n",
        "\n",
        "- **MinMaxScaler**를 적용하기 <br>\n",
        "    - 단위가 제각각일 경우 연산이나 거리 기반 계산을 할때 영향을 크게 받는 변수가 왜곡 될 수 있음.<br>\n",
        "    - 서로 다른 단위를 갖는 변수들을 동일한 범위(0~1)로 스케일링하여 비교 가능하게 만들기 위해서! <br>\n",
        "    - 최소값은 0, 최대값은 1로 맞춰주는 방식\n",
        "\n",
        "\n",
        "#### 📌 Step 3\n",
        "\n",
        "- 각 변수들을 **면적, 품질, 상태, 연식**으로 구성\n",
        "    - area_score(면적) : 'GrLivArea', 'TotalBsmtSF', 'GarageArea'<br>\n",
        "    - quality_score(품질) : 'OverallQual', 'KitchenQual', 'BsmtQual', 'ExterQual'<br>\n",
        "    - condition_score(상태) : 'OverallCond', 'BsmtFullBath'<br>\n",
        "    - year_score(연식) : 'YearBuilt'<br>\n",
        "<br>\n",
        "<br>\n",
        "- 각 score를 아래와 같이 계산<br>\n",
        "    - area_score = df_clean['GrLivArea'] + df_clean['TotalBsmtSF'] + df_clean['GarageArea']<br>\n",
        "    - quality_score = (1 - df_clean['OverallQual']) + (1 - df_clean['KitchenQual']) + (1 - df_clean['BsmtQual']) + (1 - df_clean['ExterQual'])<br>\n",
        "    - condition_score = (1 - df_clean['OverallCond']) + (1 - df_clean['BsmtFullBath'])<br>\n",
        "    - year_score = 1 - df_clean['YearBuilt']<br>\n",
        "\n",
        "#### 📌 Step 4\n",
        "- **quality_score** 와 **year_score**에 조금 더 비중을 둬서 가중치 진행<br>\n",
        "<br>\n",
        "<br>\n",
        "\n",
        "- 가중치를 둬서 계산 진행\n",
        "    - df['MaintenanceScore'] = area_score * 0.2 + quality_score * 0.3 + condition_score * 0.2 + year_score * 0.3\n",
        "<br>\n",
        "<br>\n",
        "\n",
        "- **MaintenanceScore**을 A(최우수),B(양호),C(개선필요),D(시급)으로 구분\n"
      ],
      "id": "773159ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "#| include: false\n",
        "\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "\n",
        "# 스케일링할 변수 목록\n",
        "scale_columns = [\n",
        "    'GrLivArea', 'TotalBsmtSF', 'GarageArea',   # 면적\n",
        "    'OverallQual', 'KitchenQual', 'BsmtQual', 'ExterQual',  # 품질\n",
        "    'OverallCond', 'BsmtFullBath',  # 상태\n",
        "    'YearBuilt'  # 연식\n",
        "]\n",
        "\n",
        "# MinMaxScaler 적용 (0~1 범위)\n",
        "scaler = MinMaxScaler()\n",
        "df_clean[scale_columns] = scaler.fit_transform(df_clean[scale_columns])\n",
        "df_clean = df_clean[scale_columns]\n",
        "\n",
        "\n",
        "# 면적 그대로\n",
        "area_score = df_clean['GrLivArea'] + df_clean['TotalBsmtSF'] + df_clean['GarageArea']\n",
        "\n",
        "# 품질/상태/연식 뒤집기 (1 - 값)\n",
        "quality_score = (1 - df_clean['OverallQual']) + (1 - df_clean['KitchenQual']) + (1 - df_clean['BsmtQual']) + (1 - df_clean['ExterQual'])\n",
        "condition_score = (1 - df_clean['OverallCond']) + (1 - df_clean['BsmtFullBath'])\n",
        "year_score = 1 - df_clean['YearBuilt']  # 연식도 반전\n",
        "\n",
        "# 가중치 곱하고 합산\n",
        "df['MaintenanceScore'] = (\n",
        "    area_score * 0.2 +\n",
        "    quality_score * 0.3 +\n",
        "    condition_score * 0.2 +\n",
        "    year_score * 0.3\n",
        ")"
      ],
      "id": "a3e260f9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 📌 Step 5\n",
        "\n",
        "- **MaintenanceScore** 높다는 것은 가격대비 유지보수가 높다는 것\n",
        "<br> => 해당 집은 피해야하는 집!\n",
        "<br>\n",
        "\n",
        "- **MaintenanceScore** 의 평균과 표준편차를 활용하여 등급을 나누기<br>\n",
        "    - **MaintenanceScore** >= mean + std ==> D (시급)\n",
        "    - **MaintenanceScore** >= mean       ==> C (개선필요)\n",
        "    - **MaintenanceScore** >= mean - std ==> B (양호)\n",
        "    - **MaintenanceScore** 그 외         ==> A (최우수)\n",
        "\n",
        "- 왜? 평균과 표준편차를 활용하는 걸까?\n",
        "    - 분포의 중심값(평균)을 기준으로 판단하니, 전체 데이터 비교에 유리\n",
        "    - 절대값 기준보다 덜 왜곡됨\n"
      ],
      "id": "35691f11"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: True\n",
        "#| include: false\n",
        "\n",
        "selected_features = ['OverallQual', 'ExterQual', 'KitchenQual' ,'YearBuilt', 'BsmtFullBath',\n",
        "'GrLivArea', 'TotalBsmtSF' ,'GarageArea' ,'WoodDeckSF','RoofStyle_Hip' ]\n",
        "\n",
        "df_copy = df[condition].copy()\n",
        "\n",
        "\n",
        "\n",
        "mean = df['MaintenanceScore'].mean()\n",
        "std = df['MaintenanceScore'].std()\n",
        "\n",
        "\n",
        "# 이건 정규분포 또는 비슷한 분포를 가진 점수값들을\n",
        "# 상대적으로 나누기 위한 일반적인 전략\n",
        "# 점수가 몇 점이 높고 낮은지 명확히 기준을 제시할 수 있어.\n",
        "# 분포의 중심값(평균)을 기준으로 판단하니, 전체 데이터 비교에 유리.\n",
        "# 절대값 기준보다 덜 왜곡됨, 특히 스케일링된 데이터에서는 더욱!\n",
        "\n",
        "\n",
        "def hybrid_grade(score):\n",
        "    if score >= mean + std:\n",
        "        return \"D (시급)\"\n",
        "    elif score >= mean:\n",
        "        return \"C (개선 필요)\"\n",
        "    elif score >= mean - std:\n",
        "        return \"B (양호)\"\n",
        "    else:\n",
        "        return \"A (최우수)\"\n",
        "\n",
        "df_copy['MaintenanceGrade'] = df['MaintenanceScore'].apply(hybrid_grade)"
      ],
      "id": "7dfdee57",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div style=\"all: unset; font-family: sans-serif; font-size: 16px; color: black; line-height: 1.6;\">\n",
        "::: {.no-style}\n",
        "\n",
        "\n",
        "\n",
        "# 결론 \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "::: {.card title=\"**등급 구간 별 분포**\"}\n"
      ],
      "id": "3b4f810b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "grade_order = ['A (최우수)', 'B (양호)', 'C (개선 필요)', 'D (시급)']\n",
        "df_copy['MaintenanceGrade'] = pd.Categorical(df_copy['MaintenanceGrade'],\n",
        "                                            categories=grade_order,\n",
        "                                            ordered=True)\n",
        "                                            \n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(data=df_copy, x='MaintenanceScore', y='SalePrice', hue='MaintenanceGrade')\n",
        "_ = plt.title(\"SalePrice vs MaintenanceScore\")\n",
        "_ = plt.xlabel(\"Maintenance Score\")\n",
        "_ = plt.ylabel(\"Sale Price\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "c4d87a49",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "::: {.card title=\"**A등급 중 가격이 낮은 상위 10개 집**\"}\n"
      ],
      "id": "3be5b13f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 1. D등급만 필터링 + 정렬 (로컬에서 다시 정의)\n",
        "df_copy_d = df_copy[df_copy['MaintenanceGrade'] == 'A (최우수)'].copy()\n",
        "df_d_sorted = df_copy_d.sort_values(by='SalePrice', ascending=True)\n",
        "\n",
        "# 2. 상위 10개 선택\n",
        "top10_d = df_d_sorted.head(10)\n",
        "import plotly.express as px\n",
        "\n",
        "top10_d[selected_features]\n",
        "top10_d = top10_d.reset_index()\n",
        "\n",
        "# 3. 지도 시각화\n",
        "fig = px.scatter_mapbox(\n",
        "    top10_d,\n",
        "    lat=\"Latitude\",\n",
        "    lon=\"Longitude\",\n",
        "    color=\"SalePrice\",\n",
        "    size=\"SalePrice\",\n",
        "    color_continuous_scale=\"Reds\",\n",
        "    size_max=15,\n",
        "    zoom=11,\n",
        "    mapbox_style=\"carto-positron\",\n",
        "    hover_data=[\"SalePrice\", \"MaintenanceGrade\", \"YearBuilt\", \"GrLivArea\",\"index\"]\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Top 10 A-Grade Houses (Low Price & Low Maintenance Score)\",\n",
        "    width=950,\n",
        "\n",
        "    margin={\"r\":30,\"t\":30,\"l\":0,\"b\":0}\n",
        ")\n"
      ],
      "id": "c4a3a4a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "::: {.card title=\"**등급 별 분포 지도 시각화**\"}\n"
      ],
      "id": "84e9d4cf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.scatter_mapbox(\n",
        "    df_copy,\n",
        "    lat=\"Latitude\",\n",
        "    lon=\"Longitude\",\n",
        "    color=\"MaintenanceGrade\",  # 등급별 색상 구분\n",
        "    category_orders={\n",
        "        \"MaintenanceGrade\": [\"A (최우수)\", \"B (양호)\", \"C (개선 필요)\", \"D (시급)\"]\n",
        "    },\n",
        "    mapbox_style=\"carto-positron\",\n",
        "    zoom=11,\n",
        "    size=\"SalePrice\",  # 혹은 GrLivArea도 가능\n",
        "    size_max=12,\n",
        "    hover_data=[\"SalePrice\", \"MaintenanceGrade\", \"YearBuilt\", \"GrLivArea\"]\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\"Maintenance Grade of All Properties in Ames Housing\",\n",
        "    width=950,\n",
        "    margin={\"r\":30,\"t\":30,\"l\":0,\"b\":0}\n",
        "\n",
        ")\n"
      ],
      "id": "8dbbc898",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.card title=\"**지역별 평균 MaintenanceScore**\"}\n"
      ],
      "id": "6d69a56a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import seaborn as sns\n",
        "\n",
        "\n",
        "origin_data = pd.read_csv(\"./plotly_data/ames.csv\")\n",
        "df_neigh = origin_data[[ 'Neighborhood']]  # 또는 'Id'가 기준이라면 그걸로\n",
        "df_copy = df_copy.merge(origin_data[['Neighborhood']], left_index=True, right_index=True)\n",
        "\n",
        "\n",
        "\n",
        "pivot = df_copy.pivot_table(index=\"Neighborhood\", values=\"MaintenanceScore\", aggfunc=\"mean\")\n",
        "plt.figure(figsize=(8, 10))\n",
        "sns.heatmap(pivot.sort_values(\"MaintenanceScore\", ascending=False), cmap=\"RdYlGn_r\", annot=True)\n",
        "plt.title(\"Neighborhood-wise Average Maintenance Score\")\n",
        "plt.show()"
      ],
      "id": "ad2e90f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.card title=\"**지역 별 가장 많이 분포된 유지보수 등급 **\"}\n"
      ],
      "id": "8f42d83d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "###########################################\n",
        "# Neighborhood별 지도 시각화\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 1. 등급 비율 계산\n",
        "grade_pct = pd.crosstab(df_copy['Neighborhood'], df_copy['MaintenanceGrade'])\n",
        "grade_pct = grade_pct.div(grade_pct.sum(axis=1), axis=0) * 100\n",
        "\n",
        "# 2. 가장 많은 등급 선택\n",
        "grade_pct['DominantGrade'] = grade_pct.idxmax(axis=1)\n",
        "\n",
        "# 3. 좌표 평균\n",
        "coords = df_copy.groupby('Neighborhood')[['Latitude', 'Longitude']].mean()\n",
        "\n",
        "# 4. 병합\n",
        "import plotly.express as px\n",
        "house_counts = df_copy['Neighborhood'].value_counts().rename(\"NumHouses\")\n",
        "# 5. 병합 후 표본 수까지 추가\n",
        "neigh_dominant = grade_pct[['DominantGrade']].merge(coords, left_index=True, right_index=True)\n",
        "neigh_dominant = neigh_dominant.merge(house_counts, left_on='Neighborhood', right_index=True).reset_index()\n",
        "\n",
        "fig = px.scatter_mapbox(\n",
        "    neigh_dominant,\n",
        "    lat=\"Latitude\",\n",
        "    lon=\"Longitude\",\n",
        "    size=\"NumHouses\", \n",
        "    color=\"DominantGrade\", \n",
        "    color_discrete_sequence=px.colors.qualitative.Set2,\n",
        "    category_orders={\n",
        "    \"DominantGrade\": [\"A (최우수)\", \"B (양호)\", \"C (개선 필요)\", \"D (시급)\"]\n",
        "    },\n",
        "    mapbox_style=\"carto-positron\",\n",
        "    zoom=11,\n",
        "    size_max=30,\n",
        "    hover_name=\"Neighborhood\",\n",
        "    hover_data={\"DominantGrade\": True, \"Latitude\": False, \"Longitude\": False}\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    title=\" Dominant Grade by Neighborhood\",\n",
        "    width=950,\n",
        "    margin={\"r\":30,\"t\":30,\"l\":0,\"b\":0}\n",
        ")\n"
      ],
      "id": "4da08528",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: \n"
      ],
      "id": "474fd160"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| include: false\n",
        "####  게이지 차트 시각화 : 중간 숫자는 평균 가격\n",
        "\n",
        "# 평균 계산\n",
        "species_avg = df_copy.groupby(\"MaintenanceGrade\")[\"SalePrice\"].mean().reindex(\n",
        "    [\"A (최우수)\", \"B (양호)\", \"C (개선 필요)\", \"D (시급)\"]\n",
        ")\n",
        "\n",
        "# 최대값 설정\n",
        "max_val = df_copy[\"SalePrice\"].max()\n",
        "import plotly.graph_objects as go\n",
        "# 그래프 생성\n",
        "fig = go.Figure()\n",
        "\n",
        "for i, (grade, avg_price) in enumerate(species_avg.items()):\n",
        "    fig.add_trace(go.Indicator(\n",
        "        mode=\"gauge+number\",\n",
        "        value=round(avg_price / 1000),  # 천 단위 k로 표시\n",
        "        number={\"suffix\": \"k\", \"font\": {\"size\": 40}},\n",
        "        title={'text': f\"<b>{grade}</b>\", \"font\": {\"size\": 18}},\n",
        "        domain={'row': i // 2, 'column': i % 2},  # 2행 2열\n",
        "        gauge={\n",
        "            'axis': {'range': [0, round(max_val / 1000)], 'tickformat': 'k'},\n",
        "            'bar': {'color': 'darkblue'},\n",
        "            'steps': [\n",
        "                {'range': [0, round(max_val * 0.5 / 1000)], 'color': '#d0f0f5'},\n",
        "                {'range': [round(max_val * 0.5 / 1000), round(max_val / 1000)], 'color': '#9dddf2'}\n",
        "            ],\n",
        "        }\n",
        "    ))\n",
        "\n",
        "# 레이아웃 적용\n",
        "fig.update_layout(\n",
        "    grid={'rows': 2, 'columns': 2, 'pattern': \"independent\"},\n",
        "    title=\"<b>MaintenanceGrade vs. Average SalePrice</b>\",\n",
        "    width=1000,\n",
        "    font=dict(family=\"Arial\", size=14)\n",
        ")\n"
      ],
      "id": "f8260a53",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.card title=\"**등급 별 평균 SalePrice **\"}\n"
      ],
      "id": "18005f55"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig.show()"
      ],
      "id": "5f1902b1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "</div>\n"
      ],
      "id": "36e6f485"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}